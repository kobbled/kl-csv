PROGRAM csv
%NOLOCKGROUP

%include errors.klt
%include csv.klt

VAR
  read_v : VECTOR
  read_p : XYZWPR

%include errors.klh
%include strings.klh
%include files.klh
%include csv.klh
%include csv.private.klh


--private

ROUTINE csv__read_types_
  VAR
    str : STRING[127]
    success : BOOLEAN
  BEGIN
    success = FALSE

    IF (UNINIT(delimeter) OR (delimeter = '')) THEN
      karelError(VAR_UNINIT, 'delimeter not set before read operation', ER_ABORT)
    ENDIF

    --read line
    str = files__read_line(file_name, fl)
    --check if readline was successful
    IF ((str = '') OR UNINIT(str) OR (str = 'EOF')) THEN
      RETURN(FALSE)
    ENDIF

    SELECT typ OF
      CASE(1): --rarr
        s_to_rarr(str, delimeter, real_arr)
        success = TRUE
      CASE(2): --vector
        v = s_to_vec(str, delimeter)
        success = TRUE
      CASE(3): --xyzwpr
        p = s_to_xyzwpr(str, delimeter)
        success = TRUE
      ELSE:
        karelError(INVALID_TYPE_CODE, 'type not set correctly for private method read_types_', ER_ABORT)
    ENDSELECT

    RETURN(success)
    
  END csv__read_types_

--public

ROUTINE csv__clear
  BEGIN
    files__clear(filename, fl)
  END csv__clear

ROUTINE csv__write_pipe
  BEGIN
    files__write_from_pipe(pipname, pip_fl, filename, write_fl)
  END csv__write_pipe

ROUTINE csv__write_to_display
  BEGIN
    files__write_to_display(filename, fl)
  END csv__write_to_display

ROUTINE csv__write_row_string
  VAR
    i : INTEGER
    s : STRING[254]
  BEGIN

    --create csv string from array
    s = ''
    FOR i=1 TO ARRAY_LEN(row) DO
      IF UNINIT(row[i]) THEN karelError(VAR_UNINIT, 'uninitialized data in col: ' + i_to_s(i) +  & 
                                        ' passed to csv file', ER_ABORT) ; ENDIF
      s = s + row[i]
      s = s + delimeter
    ENDFOR
    --take out extra
    s = delim_strip(s, delimeter)

    -- write to pipe
    OPEN FILE fl ('AP', file_name)

    WRITE fl(s)
    IF (s <> '') THEN
      WRITE fl(CR)
    ENDIF

    CLOSE FILE fl
  END csv__write_row_string


ROUTINE csv__write_row_val
  VAR
    i : INTEGER
    row_s : ARRAY[CSV_MAX_COLUMNS] OF STRING[CSV_CELL_LENGTH]
  BEGIN
    IF ARRAY_LEN(row) > ARRAY_LEN(row_s) THEN
      karelError(INVALID_INDEX, 'real row is greater than max csv columns, ' + i_to_s(CSV_MAX_COLUMNS), ER_ABORT)
    ENDIF

    FOR i=1 TO ARRAY_LEN(row) DO
      row_s[i] = r_to_s(row[i])
    ENDFOR

    csv__write_row_string(file_name, csv_fl, delimeter, row_s)
  END csv__write_row_val


ROUTINE csv__write_row_vector
  VAR
    row_s : ARRAY[3] OF STRING[CSV_CELL_LENGTH]
  BEGIN
    row_s[1] = r_to_s(row.x) 
    row_s[2] = r_to_s(row.y)
    row_s[3] = r_to_s(row.z)
    csv__write_row_string(file_name, csv_fl, delimeter, row_s)
  END csv__write_row_vector


ROUTINE csv__write_row_xyzwpr
  VAR
    row_s : ARRAY[6] OF STRING[CSV_CELL_LENGTH]
  BEGIN
    row_s[1] = r_to_s(row.x) 
    row_s[2] = r_to_s(row.y)
    row_s[3] = r_to_s(row.z)
    row_s[4] = r_to_s(row.w) 
    row_s[5] = r_to_s(row.p)
    row_s[6] = r_to_s(row.r)
    csv__write_row_string(file_name, csv_fl, delimeter, row_s)
  END csv__write_row_xyzwpr


ROUTINE csv__read_open
  BEGIN
    OPEN FILE fl ('RO', file_name)
  END csv__read_open


ROUTINE csv__read_close
  BEGIN
    CLOSE FILE fl
  END csv__read_close


ROUTINE csv__read_line
  BEGIN
    --readline if data
    RETURN(files__read_line(file_name, fl))
  END csv__read_line


ROUTINE csv__read_rarr
  VAR
    v : VECTOR
    p : XYZWPR
    s : BOOLEAN
  BEGIN
    s = csv__read_types_(file_name, fl, delimeter, 1, out_arr, v, p)
    IF NOT s THEN
      out_arr = uninit_arr
    ENDIF
  END csv__read_rarr


ROUTINE csv__read_vector
  VAR
    r : ARRAY[1] OF REAL
    p : XYZWPR
    uninit_v : ARRAY[1] OF VECTOR
    entry : INTEGER
    status: INTEGER
    b : BOOLEAN
   BEGIN
    b = csv__read_types_(file_name, fl, delimeter, 2, r, out_v, p)
    --use flag to tell parent task if EOF or an error has been reached
    read_v = out_v
    IF NOT b THEN
      --set vector to uninit
      SET_VAR(entry,'csv','read_v',uninit_v[1],status)
    ENDIF

  END csv__read_vector


ROUTINE csv__read_xyzwpr
  VAR
    r : ARRAY[1] OF REAL
    uninit_p : ARRAY[1] OF XYZWPR
    v : VECTOR
    entry : INTEGER
    status: INTEGER
    b : BOOLEAN
  BEGIN
    b = csv__read_types_(file_name, fl, delimeter, 3, r, v, out_p)
    --use flag to tell parent task if EOF or an error has been reached
    read_p = out_p
    IF NOT b THEN
      --set xyzwpr to uninit
      SET_VAR(entry,'csv','read_p',uninit_p[1],status)
    ENDIF

  END csv__read_xyzwpr


BEGIN
END csv
