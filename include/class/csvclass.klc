PROGRAM class_name
%NOLOCKGROUP
%COMMENT = 'csv class'

%include namespace.m

%include errors.klt
%include systemlib.codes.klt
%include systemlib.datatypes.klt
%include csv.klt

VAR
    this : CSV_STRUCT
    line  : STRING[CSV_LINE_CHAR_LENGTH]
    data : t_DATA_TYPE
    csv_file : FILE

%include errors.klh
%include strings.klh
%include files.klh
%include csv.klh

%include csvclass.private.klh -- class.klh
%include csvclass.klh -- class.klh

--private

ROUTINE clear_fieldnames
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(this.fieldnames) DO 
      this.fieldnames[i] = ''
    ENDFOR
  END clear_fieldnames


ROUTINE write_fieldnames
  VAR
    i : INTEGER
    s : STRING[254]
  BEGIN
    -- write header
    s = ''
    FOR i=1 TO this.columns DO
      s = s + this.fieldnames[i]
      IF i < this.columns THEN
        s = s + this.delimeter
      ENDIF
    ENDFOR

    --open csv to write header
    files__open(this.filename, 'RW', csv_file)

    WRITE csv_file(s)
    IF (s <> '') THEN
      WRITE csv_file(CR)
    ENDIF
    this.writeLines = this.writeLines + 1

    files__close(this.filename, csv_file)

  END write_fieldnames

ROUTINE check_read
  BEGIN
    IF (UNINIT(line) OR (line = '') OR (line = 'EOF')) THEN
      --karelError(VAR_UNINIT, 'Need to call read_line on csv first!', ER_WARN)
      RETURN(FALSE)
    ENDIF

    IF (UNINIT(this.delimeter) OR (this.delimeter = '')) THEN
      karelError(VAR_UNINIT, 'delimeter not set before read operation', ER_ABORT)
    ENDIF

    RETURN(TRUE)
  END check_read

--public

ROUTINE new
  BEGIN
    --set filename
    this.filename = filename
    --set delimeter
    set_delimeter(delim)
    --set fieldnames
    set_fieldnames(header)
    --reset line count
    this.writeLines = 0
    this.readLines = 0
    --set maximum lines in pipe
    this.maxpipe = 1000

  END new


ROUTINE delete
  BEGIN
    this.filename = ''
    this.delimeter = ''
    --clear fieldnames
    clear_fieldnames
    this.columns = 0
    
    this.writeLines = 0
    this.readLines = 0
    this.maxpipe = 0
  END delete


ROUTINE clear
  BEGIN
    csv__clear(this.filename, csv_file)
    this.writeLines = 0
    this.readLines = 0
  END clear

ROUTINE open
  BEGIN
    csv__open(this.filename, 'RW', csv_file)
  END open

ROUTINE open_append
  BEGIN
    csv__append_open(this.filename, csv_file)
  END open_append

ROUTINE close
  BEGIN
    csv__read_close(csv_file)
  END close

ROUTINE isopen
  BEGIN
    files__check_open(this.filename, csv_file)
  END isopen

ROUTINE isclosed
  BEGIN
    files__check_closed(this.filename, csv_file)
  END isclosed

--getters
ROUTINE get_filename
  BEGIN
    RETURN(this.filename)
  END get_filename

ROUTINE get_line
  BEGIN
    RETURN(line)
  END get_line

ROUTINE get_fieldnames
  BEGIN
    RETURN(sarr_to_s(this.fieldnames, this.delimeter) )
  END get_fieldnames

ROUTINE get_maxlines
  BEGIN
    RETURN(this.maxpipe)
  END get_maxlines

ROUTINE get_lines_written
  BEGIN
    RETURN(this.writeLines)
  END get_lines_written

ROUTINE get_lines_read
  BEGIN
    RETURN(this.readLines)
  END get_lines_read

ROUTINE copy_data
  VAR
    data_copy : t_DATA_TYPE
  BEGIN
    IF (NOT UNINIT(data.int)) THEN data_copy.int = (data.int); ENDIF
    IF (NOT UNINIT(data.rl)) THEN data_copy.rl = (data.rl); ENDIF
    IF (NOT UNINIT(data.str)) THEN data_copy.str = (data.str); ENDIF
    IF (NOT UNINIT(data.bool)) THEN data_copy.bool = (data.bool); ENDIF
    IF (NOT UNINIT(data.vec)) THEN data_copy.vec = (data.vec); ENDIF
    IF (NOT UNINIT(data.pos)) THEN data_copy.pos = (data.pos); ENDIF
    IF (NOT UNINIT(data.posext)) THEN data_copy.posext = (data.posext); ENDIF
    IF (NOT UNINIT(data.cnfg)) THEN data_copy.cnfg = (data.cnfg); ENDIF

    RETURN(data_copy)
  END copy_data

ROUTINE get_data
  BEGIN
    RETURN(data)
  END get_data

--setters

ROUTINE set_delimeter
  BEGIN
    IF STR_LEN(delim) > 1 THEN karelError(0, 'csv delimeter must be a single char', ER_ABORT) ; ENDIF
    delim_check(delim)

    this.delimeter = delim
  END set_delimeter


ROUTINE set_fieldnames
  VAR
    i : INTEGER
    c : INTEGER
  BEGIN
    --get rid of trailing ,'s
    header = rstripChar(header, this.delimeter)
    --clear fieldnames
    clear_fieldnames
    --split header against delimeter
    split_str(header, this.delimeter, this.fieldnames)
    --tally columns
    c = 0
    FOR i=1 TO ARRAY_LEN(this.fieldnames) DO
      IF this.fieldnames[i] <> '' THEN c = c + 1 ; ENDIF
    ENDFOR

    this.columns = c
  END set_fieldnames


ROUTINE set_maxlines
  BEGIN
    this.maxpipe = maxlines
  END set_maxlines


--write
ROUTINE write_to_display
  BEGIN
    files__write_to_display(this.filename, csv_file)
  END write_to_display

ROUTINE write_to_file
  BEGIN
    files__write_from_pipe(this.filename, csv_file, filename, fl, handle_file)
  END write_to_file

ROUTINE write_string
  BEGIN
    --make sure file is closed before appending to it
    files__close(this.filename, csv_file)

    -- append to file
    files__write(str, this.filename, csv_file)
    this.writeLines = this.writeLines + 1
  END write_string


ROUTINE write_row_string
  BEGIN
    IF ARRAY_LEN(row) > this.columns THEN
      karelError(ARR_LEN_MISMATCH, 'row length ' + i_to_s(ARRAY_LEN(row)) + ' is larger than number '+ CHR(13) + &
                  'of columns '+ i_to_s(this.columns) + ' in csv file', ER_WARN_STP)
    ENDIF

    csv__write_row_string(this.filename, csv_file, this.delimeter, row)
    this.writeLines = this.writeLines + 1
  END write_row_string


ROUTINE write_row_val
  BEGIN
    IF ARRAY_LEN(row) > this.columns THEN
      karelError(ARR_LEN_MISMATCH, 'row length ' + i_to_s(ARRAY_LEN(row)) + ' is larger than number '+ CHR(13) + &
                  'of columns '+ i_to_s(this.columns) + ' in csv file', ER_WARN_STP)
    ENDIF

    csv__write_row_val(this.filename, csv_file, this.delimeter, row)
    
    this.writeLines = this.writeLines + 1
  END write_row_val


ROUTINE write_row_vector
  BEGIN
    csv__write_row_vector(this.filename, csv_file, this.delimeter, row)
    this.writeLines = this.writeLines + 1
  END write_row_vector

ROUTINE write_row_xyzwpr
  BEGIN
    csv__write_row_xyzwpr(this.filename, csv_file, this.delimeter, row)
    this.writeLines = this.writeLines + 1
  END write_row_xyzwpr

--read

ROUTINE read_header
  BEGIN
    set_fieldnames(csv__read_line(this.filename, csv_file))
    this.readLines = this.readLines + 1
  END read_header

ROUTINE read_line
  BEGIN
    --readline if data
    --files__read_line_ref(this.filename, csv_file, line)
    line = files__read_line(this.filename, csv_file)

    --check if readline was successful
    IF ((line = '') OR UNINIT(line) OR (line = 'EOF')) THEN
      RETURN(FALSE)
    ENDIF

    this.readLines = this.readLines + 1
    RETURN(TRUE)

  END read_line

ROUTINE read_rarr
  VAR
    i : ARRAY[1] OF INTEGER
    s : ARRAY[1] OF STRING[1]
    b : BOOLEAN
  BEGIN

    b = check_read

    IF b THEN
      --count number of items in string
      -- if size isn't set use full string
      IF size = 0 THEN
        --count the number of items in the string
        size = char_count(line, this.delimeter)
      ENDIF

      files__read_type(line, this.delimeter, offset, size, C_REAL_ARR, data, out_arr, i, s)
    ENDIF
  END read_rarr

ROUTINE read_iarr
  VAR
    r : ARRAY[1] OF REAL
    s : ARRAY[1] OF STRING[1]
    b : BOOLEAN
  BEGIN

    b = check_read

    IF b THEN
      --count number of items in string
      -- if size isn't set use full string
      IF size = 0 THEN
        --count the number of items in the string
        size = char_count(line, this.delimeter)
      ENDIF

      files__read_type(line, this.delimeter, offset, size, C_INT_ARR, data, r, out_arr, s)
    ENDIF
  END read_iarr

ROUTINE read_sarr
  VAR
    r : ARRAY[1] OF REAL
    i : ARRAY[1] OF INTEGER
    b : BOOLEAN
  BEGIN

    b = check_read

    IF b THEN
      --count number of items in string
      -- if size isn't set use full string
      IF size = 0 THEN
        --count the number of items in the string
        size = char_count(line, this.delimeter)
      ENDIF

      files__read_type(line, this.delimeter, offset, size, C_STR_ARR, data, r, i, out_arr)
    ENDIF
  END read_sarr

ROUTINE read_int
  VAR
    i : ARRAY[1] OF INTEGER
    r : ARRAY[1] OF REAL
    s : ARRAY[1] OF STRING[1]
  BEGIN
    files__read_type(line, this.delimeter, offset, 1, C_INT, data, r, i, s)
    RETURN(data.int)
  END read_int

ROUTINE read_real
  VAR
    i : ARRAY[1] OF INTEGER
    r : ARRAY[1] OF REAL
    s : ARRAY[1] OF STRING[1]
  BEGIN
    files__read_type(line, this.delimeter, offset, 1, C_REAL, data, r, i, s)
    RETURN(data.rl)
  END read_real

ROUTINE read_string
  VAR
    i : ARRAY[1] OF INTEGER
    r : ARRAY[1] OF REAL
    s : ARRAY[1] OF STRING[1]
  BEGIN
    files__read_type(line, this.delimeter, offset, 1, C_STR, data, r, i, s)
    RETURN(data.str)
  END read_string

ROUTINE read_bool
  VAR
    i : ARRAY[1] OF INTEGER
    r : ARRAY[1] OF REAL
    s : ARRAY[1] OF STRING[1]
  BEGIN
    files__read_type(line, this.delimeter, offset, 1, C_STR, data, r, i, s)
    RETURN(data.bool)
  END read_bool


ROUTINE read_vector
  VAR
    i : ARRAY[1] OF INTEGER
    r : ARRAY[1] OF REAL
    s : ARRAY[1] OF STRING[1]
  BEGIN
    files__read_type(line, this.delimeter, offset, 1, C_VEC, data, r, i, s)
    RETURN(data.vec)
  END read_vector

ROUTINE read_xyzwpr
  VAR
    i : ARRAY[1] OF INTEGER
    r : ARRAY[1] OF REAL
    s : ARRAY[1] OF STRING[1]
  BEGIN
    files__read_type(line, this.delimeter, offset, 1, C_POS, data, r, i, s)
    RETURN(data.pos)
  END read_xyzwpr

ROUTINE read_data
  VAR
    i : ARRAY[1] OF INTEGER
    r : ARRAY[1] OF REAL
    s : ARRAY[1] OF STRING[1]
  BEGIN
    --..warning:: Assumes friends relationship with this class and the
    --            "data" attribute.
    files__read_type(line, split, offset, 1, typ, data, r, i, s)
  END read_data

BEGIN
END class_name
