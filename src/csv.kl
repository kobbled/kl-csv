PROGRAM csv
%NOLOCKGROUP

%include errors.klt
%include csv.klt

%include errors.klh
%include strings.klh
%include files.klh
%include csv.klh


--private

--public

ROUTINE csv__clear
  BEGIN
    files__clear(filename, fl)
  END csv__clear

ROUTINE csv__write_pipe
  BEGIN
    files__write_pipe(pipname, pip_fl, filename, write_fl, 'AP')
  END csv__write_pipe

ROUTINE csv__write_display
  BEGIN
    files__write_display(filename, fl)
  END csv__write_display

ROUTINE csv__write_row_string
  VAR
    i : INTEGER
    s : STRING[254]
  BEGIN

    --create csv string from array
    s = ''
    FOR i=1 TO ARRAY_LEN(row) DO
      IF UNINIT(row[i]) THEN karelError('uninitialized data in col: ' + i_to_s(i) +  & 
                                        ' passed to csv file', ER_ABORT) ; ENDIF
      s = s + row[i]
      s = s + delimeter
    ENDFOR
    --take out extra
    s = delim_strip(s, delimeter)

    -- write to pipe
    OPEN FILE fl ('AP', file_name)

    WRITE fl(s)
    IF (s <> '') THEN
      WRITE fl(CR)
    ENDIF

    CLOSE FILE fl
  END csv__write_row_string


ROUTINE csv__write_row_val
  VAR
    i : INTEGER
    row_s : ARRAY[CSV_MAX_COLUMNS] OF STRING[CSV_CELL_LENGTH]
  BEGIN
    IF ARRAY_LEN(row) > ARRAY_LEN(row_s) THEN
      karelError('real row is greater than max csv columns, ' + i_to_s(CSV_MAX_COLUMNS), ER_ABORT)
    ENDIF

    FOR i=1 TO ARRAY_LEN(row) DO
      row_s[i] = r_to_s(row[i])
    ENDFOR

    csv__write_row_string(file_name, csv_fl, delimeter, row_s)
  END csv__write_row_val


ROUTINE csv__write_row_vector
  VAR
    row_s : ARRAY[3] OF STRING[CSV_CELL_LENGTH]
  BEGIN
    row_s[1] = r_to_s(row.x) 
    row_s[2] = r_to_s(row.y)
    row_s[3] = r_to_s(row.z)
    csv__write_row_string(file_name, csv_fl, delimeter, row_s)
  END csv__write_row_vector


ROUTINE csv__write_row_xyzwpr
  VAR
    row_s : ARRAY[6] OF STRING[CSV_CELL_LENGTH]
  BEGIN
    row_s[1] = r_to_s(row.x) 
    row_s[2] = r_to_s(row.y)
    row_s[3] = r_to_s(row.z)
    row_s[4] = r_to_s(row.w) 
    row_s[5] = r_to_s(row.p)
    row_s[6] = r_to_s(row.r)
    csv__write_row_string(file_name, csv_fl, delimeter, row_s)
  END csv__write_row_xyzwpr


ROUTINE csv__read_open
  BEGIN
    --open pipe
    OPEN FILE pip ('RO', file_name)
  END csv__read_open


ROUTINE csv__read_close
  BEGIN
    --close pipe
    CLOSE FILE pip
  END csv__read_close


ROUTINE csv__read_line
  BEGIN
    RETURN(files__read_line(file_name, pip))
  END csv__read_line


ROUTINE csv__read_rarr
  BEGIN
    IF (UNINIT(delimeter)) OR (delimeter = '') THEN
      karelError('delimeter not set before read operation', ER_ABORT)
    ENDIF

    --read line and output as real array
    s_to_rarr(csv__read_line(file_name, pip), delimeter, out_arr)

  END csv__read_rarr


ROUTINE csv__read_vector
  BEGIN
    IF (UNINIT(delimeter)) OR (delimeter = '') THEN
      karelError('delimeter not set before read operation', ER_ABORT)
    ENDIF

    --read line and output as vector
    RETURN(s_to_vec(csv__read_line(file_name, pip), delimeter))
  END csv__read_vector


ROUTINE csv__read_xyzwpr
  BEGIN
    IF (UNINIT(delimeter)) OR (delimeter = '') THEN
      karelError('delimeter not set before read operation', ER_ABORT)
    ENDIF
    
    --read line and output as vector
    RETURN(s_to_xyzwpr(csv__read_line(file_name, pip), delimeter))
  END csv__read_xyzwpr


BEGIN
END csv
