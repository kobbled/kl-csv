PROGRAM tst_csv_main
%NOLOCKGROUP

CONST
  PIPE_NAME = 'PIP:TESTCSV.DAT'
  FILE_NAME = 'FR:testcsv.csv'
  --set max write lines before reading
  --to TPDISLAY
  MAXLINES = 8
VAR
    csv_name : STRING[16]
    csv_file : FILE
    entries : INTEGER
    block_write : INTEGER
    waitime : INTEGER
    writedelay : INTEGER
    strt, done : BOOLEAN
    status : INTEGER

%include errors.klt
%include csv.klt
%include systemlib.c.klt

%include multitask.klh
%include errors.klh
%include csv.klh

-- sensor csv file
%class tstcsv('csvclass.klc','csvclass.klh')

BEGIN
    --set number of write operations
    entries = 30
    --set max wait time for read task
    waitime = 2000
    --time between write operations
    writedelay = 100

    --set semaphore
    block_write = 1
    CLEAR_SEMA (block_write)
    --make writing immediately available
    POST_SEMA (block_write)

    --create csv file
    csv_name = FILE_NAME
    csv__create(csv_name, csv_file)
    --clear file if exists
    csv__clear(csv_name, csv_file)

    --initialize pipe
    tstcsv__new(PIPE_NAME, ',', POSITION_HEADER)
    tstcsv__set_maxlines(MAXLINES)

    --write feildnames
    tstcsv__write_fieldnames

    -- start reader
    strt = task__thread('tst_csv_writ')
    IF NOT strt THEN
        karelError(CANT_READ, 'could not start csv write to display task',ER_ABORT)
    ENDIF
    -- start writer
    strt = task__thread('tst_csv_pipe')
    IF NOT strt THEN
        karelError(CANT_WRITE, 'could not start csv write to pipe',ER_ABORT)
    ENDIF


    -- keep parent program active until write task is complete
    REPEAT
        --check if done writing
        done = task__is_task_done('tst_csv_pipe')
        DELAY 100
    UNTIL(done)

    done = task__abort('tst_csv_writ')
    WRITE TPDISPLAY(CR,'csv read is done.')

    tstcsv__delete

END tst_csv_main
