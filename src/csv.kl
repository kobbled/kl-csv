PROGRAM csv
%NOLOCKGROUP

%include errors.klt
%include systemlib.c.klt
%include csv.klt

VAR
  read_v : VECTOR
  read_p : XYZWPR

%include errors.klh
%from strings.klh %import s_to_rarr, s_to_vec, s_to_xyzwpr 
%from strings.klh %import i_to_s, r_to_s, delim_strip, char_count
%include files.klh
%include csv.klh
%include csv.private.klh


--private

--use for parsing full csv lines in a number or string array
ROUTINE csv__read_type_array
  VAR
    str : STRING[127]
    dummy_typ : t_DATA_TYPE
    success : BOOLEAN
    count : INTEGER
  BEGIN
    success = FALSE

    --only allow for array types
    IF (NOT typ = C_INT_ARR) AND (NOT typ = C_REAL_ARR) AND (NOT typ = C_STR_ARR) THEN
      karelError(INVALID_TYPE_CODE, 'must use an array type in csv__read_type_array.', ER_ABORT)
    ENDIF

    IF (UNINIT(delimeter) OR (delimeter = '')) THEN
      karelError(VAR_UNINIT, 'delimeter not set before read operation', ER_ABORT)
    ENDIF

    --read line
    files__read_line_ref(file_name, fl, str)

    --check if readline was successful
    IF ((str = '') OR UNINIT(str) OR (str = 'EOF')) THEN
      RETURN(FALSE)
    ENDIF

    --count number of items in string
    count = char_count(str, delimeter)

    files__read_type(str, delimeter, 1, count, typ, dummy_typ, real_arr, int_arr, str_arr)

    RETURN(success)
    
  END csv__read_type_array

--public

ROUTINE csv__clear
  BEGIN
    files__clear(filename, fl)
  END csv__clear

ROUTINE csv__create
  VAR
    b : BOOLEAN
  BEGIN
    b = files__create(filename, fl)
  END csv__create

ROUTINE csv__open
  BEGIN
    files__open(filename, access_typ, fl)
  END csv__open

ROUTINE csv__close
  BEGIN
    files__close(filename, fl)
  END csv__close

ROUTINE csv__write_pipe
  BEGIN
    files__write_from_pipe(pipname, pip_fl, filename, write_fl, handle_file)
  END csv__write_pipe

ROUTINE csv__write_to_display
  BEGIN
    files__write_to_display(filename, fl)
  END csv__write_to_display

ROUTINE csv__write_string
  BEGIN
    -- write to file
    files__write(str, file_name, fl)
  END csv__write_string

ROUTINE csv__write_row_string
  VAR
    i : INTEGER
    s : STRING[254]
  BEGIN

    --create csv string from array
    s = ''
    FOR i=1 TO ARRAY_LEN(row) DO
      IF UNINIT(row[i]) THEN karelError(VAR_UNINIT, 'uninitialized data in col: ' + i_to_s(i) +  & 
                                        ' passed to csv file', ER_ABORT) ; ENDIF
      s = s + row[i]
      s = s + delimeter
    ENDFOR
    --take out extra
    s = delim_strip(s, delimeter)

    -- write to pipe
    files__write(s, file_name, fl)

  END csv__write_row_string


ROUTINE csv__write_row_val
  VAR
    i : INTEGER
    row_s : ARRAY[CSV_MAX_COLUMNS] OF STRING[CSV_CELL_LENGTH]
  BEGIN
    IF ARRAY_LEN(row) > ARRAY_LEN(row_s) THEN
      karelError(INVALID_INDEX, 'real row is greater than max csv columns, ' + i_to_s(CSV_MAX_COLUMNS), ER_ABORT)
    ENDIF

    FOR i=1 TO ARRAY_LEN(row) DO
      row_s[i] = r_to_s(row[i])
    ENDFOR

    csv__write_row_string(file_name, csv_fl, delimeter, row_s)
  END csv__write_row_val


ROUTINE csv__write_row_vector
  VAR
    row_s : ARRAY[3] OF STRING[CSV_CELL_LENGTH]
  BEGIN
    row_s[1] = r_to_s(row.x) 
    row_s[2] = r_to_s(row.y)
    row_s[3] = r_to_s(row.z)
    csv__write_row_string(file_name, csv_fl, delimeter, row_s)
  END csv__write_row_vector


ROUTINE csv__write_row_xyzwpr
  VAR
    row_s : ARRAY[6] OF STRING[CSV_CELL_LENGTH]
  BEGIN
    row_s[1] = r_to_s(row.x) 
    row_s[2] = r_to_s(row.y)
    row_s[3] = r_to_s(row.z)
    row_s[4] = r_to_s(row.w) 
    row_s[5] = r_to_s(row.p)
    row_s[6] = r_to_s(row.r)
    csv__write_row_string(file_name, csv_fl, delimeter, row_s)
  END csv__write_row_xyzwpr


ROUTINE csv__read_open
  BEGIN
    CLR_IO_STAT(fl)
    OPEN FILE fl ('RO', file_name)
  END csv__read_open


ROUTINE csv__read_close
  BEGIN
    CLOSE FILE fl
  END csv__read_close


ROUTINE csv__read_line
  BEGIN
    --readline if data
    RETURN(files__read_line(file_name, fl))
  END csv__read_line

ROUTINE csv__read_line_ref
  BEGIN
    --readline if data
    files__read_line_ref(file_name, fl, out_str)

    --check if readline was successful
    IF ((out_str = '') OR UNINIT(out_str) OR (out_str = 'EOF')) THEN
      RETURN(FALSE)
    ENDIF

    RETURN(TRUE)

  END csv__read_line_ref


ROUTINE csv__read_rarr
  VAR
    success : BOOLEAN
    i : ARRAY[1] OF INTEGER
    s : ARRAY[1] OF STRING[1]
  BEGIN
    success = csv__read_type_array(file_name, fl, delimeter, C_REAL_ARR, out_arr, i, s)
    IF NOT success THEN
      out_arr = uninit_arr
    ENDIF

    RETURN(success)
  END csv__read_rarr

ROUTINE csv__read_iarr
  VAR
    success : BOOLEAN
    r : ARRAY[1] OF REAL
    s : ARRAY[1] OF STRING[1]
  BEGIN
    success = csv__read_type_array(file_name, fl, delimeter, C_INT_ARR, r, out_arr, s)
    IF NOT success THEN
      out_arr = uninit_arr
    ENDIF

    RETURN(success)
  END csv__read_iarr

ROUTINE csv__read_sarr
  VAR
    success : BOOLEAN
    r : ARRAY[1] OF REAL
    i : ARRAY[1] OF INTEGER
  BEGIN
    success = csv__read_type_array(file_name, fl, delimeter, C_INT_ARR, r, i, out_arr)
    IF NOT success THEN
      out_arr = uninit_arr
    ENDIF

    RETURN(success)
  END csv__read_sarr


BEGIN
END csv
